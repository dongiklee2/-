영어음성학응용 04 2022 03 16

Import - 여러 가지 패키지들(특정 사람들이 좋은 함수들을 만들어냄), 많이 쓰는 패키지들은 파이썬을 깔면 install이 되어 있어서 그냥 import만 하면 쓸 수 있음
	-> 설치는 되어 있어도 바로 쓸 수 있는 상태로 만들어 주어야 함
	import도 할 필요가 없는 것들 built in
	아무 것도 안 되어 있어서 install을 해야 하는 것

numpy의 역할? 난수를 만들거나 행렬을 만들거나 숫자를 가지고 간단한 통계처리 등
	numpy.random.randn(5) - numpy 안의 random 안의 randn function을 실행, 이 경우 5개의 랜덤 넘버가 만들어짐
	import numpy as np -> numpy를 간단히 하여 np로 사용할 수 있게 만듬
	n = np.random.randn(100) n이라는 variable에 100개의 난수 집어넣음

	matplotlib.pyplot.hist(n) 하면 n이라는 variable에 대한 표를 만들어 줌, hist란? histogram - 몇개의 칸으로 나누고 그 칸마다 해당하는 난수들이 몇 번 나오는가를 표로 제작
		ex)-2.5에서 -2 사이에는 해당하는 변수가 4개가 있다
	import matplotlib.pyplot - matplotlib.pyplot를 한 번에 import 해줌
	import matplotlib.pyplot as plt - 앞서 numpy의 경우와 같이 저 긴 package를 plt로 바꿔서 간단하게 사용할 수 있게 해줌

	from matplotlib import pyplot
	pyplot.hist(n)
							귀찮을 때 from을 이용해 빠르게 줄이는 방법들
	from matplotlib.pyplot import hist
	hist(n)


numpy와 matplotlib.ipynb(numpy_matplotlib.ipynb)
	%%%%%%%%%%%%%%%create nd arrays (≈matrices)
	Matrices란? Matrix(행렬, 직사각형의 숫자 array 배열)
	nd array? n-dimended array ex) 1d array 일차원 배열 등


	"ndarray"
	x = np.array([1,2,3])					[1 2 3]
	print(x)						<class 'numpy.ndarray'>	class란 특수한 변수를 말함, 즉 numpy에서 제공하는 특수한 변수 ndarray
	print(type(x))					(3,)			1d array라서 이렇게 나옴
	print(x.shape)			


	"arange"
	x = np.arange(0,10,2)
		여기서 괄호 안의 숫자는 increment 증가되는 것 즉 0과 10 사이에서 2만큼씩 늘어나는 숫자를 뽑아라 but 10은 포함 X				
	print(x)						
	print(type(x))					
	print(x.shape)					
	
	->

	[0 2 4 6 8]
	<class 'numpy.ndarray'>
	(5,)

	"linspace"
	x = np.linspace(0,10,6)		0에서 10까지중에 균등한 간격으로 6개의 숫자를 만들어라!
	print(x)
	print(type(x))
	print(x.shape)

	->

	[ 0.  2.  4.  6.  8. 10.]
	<class 'numpy.ndarray'>
	(6,)


	"list를 ndarray 하는 방법?"
	x = np.array([[1,2,3], [4,5,6]])
	print(x)
	print(type(x))
	print(x.shape)

	->

	[[1 2 3]
 	[4 5 6]]
	<class 'numpy.ndarray'>
	(2, 3)

	3d의 경우
	x = np.array([[[1,2,3], [4,5,6]], [[7,8,9], [10,11,12]]])
	print(x)
	print(type(x))
	print(x.shape)

	->

	[[[ 1  2  3]
 	 [ 4  5  6]]

	 [[ 7  8  9]
	  [10 11 12]]]
	<class 'numpy.ndarray'>
	(2, 2, 3)		3에 해당은 123, 두번째 2는 	123
						456
			첫번째 2는 전체를 의미
			123
			456

			789
			10 11 12

	"ones" 1로 채워진 array를 만듬, "zeros"도 마찬가지!
	x = np.ones([2, 2, 3])
	print(x)
	print(type(x))
	print(x.shape)

	->

	[[[1. 1. 1.]
	  [1. 1. 1.]]

	 [[1. 1. 1.]
	  [1. 1. 1.]]]
	<class 'numpy.ndarray'>
	(2, 2, 3)

	%%%%%%%%%%%%%%%%%%%%%%%%%create random numbers
	np.random.normal(0, 1, [2,3,4])		0과 1 사이에서 [2,3,4] 형태의 array를 만들어라!
	
	->

	array([[[-0.7684465 ,  2.02152979,  0.67345919,  1.42597255],
	        [ 0.10535416,  0.20301356,  1.04757358, -1.74130648],
	        [ 1.25230091, -1.16243132,  0.71093607,  1.01844288]],
	
	       [[-0.47182462,  0.38816534,  1.38832171,  0.11857628],
	        [-0.17241228,  0.67694336, -0.71748975,  1.45367011],
	        [-0.6923177 , -0.25912487,  0.58073832, -0.4477943 ]]])

	x = np.random.normal(0, 1, 100)		100개의 1d짜리 array들을 만든다 0에서 1사이 값으로
	print(x)
	plt.hist(x, bins=10)				bins? 가로축에 들어갈 칸의 개수를 정하는 것

	%%%%%%%%%%%%%%%%%%generate a sine curve
	plt.figure()						틀을 잡아주는 함수	

	theta1 = np.linspace(0, 2*np.pi, 100)				2*np.pi는 우리가 아는 파이, 즉 2파이를 말함
	s1 = np.sin(theta1)						so 해당 function은 0부터 2파이까지 사이에서 100개의 linspace한 숫자들을 만들어라
	theta2 = np.linspace(0, 2*np.pi, 100) + np.pi/2			np.sin? sin 함수를 만들라는 것!
	s2 = np.sin(theta2)
								theta는 입력, s는 출력
	plt.subplot(2, 1, 1) # (행, 열, 만들어진 그림중에 몇 번째를 쓸지)	전체 그림이 2줄, 세로로는 1줄, 앞서 만들어진 그림  중 1번째 거에 그림을 그려라
	plt.plot(theta1, s1, '.')					subplot은 plot을 꾸며주는 것, 여기서 .은 .형태로 그림을 그리라는 뜻
	plt.subplot(2, 1, 2) # (rows, columns, panel number)
	plt.plot(theta2, s2, '.')

	요소들이 상관관계가 높을 때 즉 correlation이 높을 때 r 즉 요소들로 만든 그래프의 기울기가 1에 가까워진다

	np.corrcoef(s1,s2)

	->

	array([[1.00000000e+00, 2.41915449e-17],
	       [2.41915449e-17, 1.00000000e+00]])			여기서 첫번째와 네번째는 항상 1이 나오므로 버리고, 2 3은 같으므로 사실상 2나 3 하나만 보면 됨


	github 숙제!			20220316.ipynb